# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # CI Job: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup JDK
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # Step 4: Build the project
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      # Step 5: Run unit tests
      - name: Run tests
        run: mvn test --file pom.xml

  # CD Job: Simulated Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test  # Runs only if build-and-test succeeds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Simulate deployment
        run: |
          echo "âœ… Build succeeded!"
          echo "ðŸš€ Simulating deployment process..."
          echo "In a real-world scenario, this step would deploy your app to Heroku, Render, or AWS."
